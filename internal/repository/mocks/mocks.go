// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"web/example/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepositoryInterface creates a new instance of MockPostRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepositoryInterface is an autogenerated mock type for the PostRepositoryInterface type
type MockPostRepositoryInterface struct {
	mock.Mock
}

type MockPostRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterface_Expecter {
	return &MockPostRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) CreatePost(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepositoryInterface_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostRepositoryInterface_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - post *domain.Post
func (_e *MockPostRepositoryInterface_Expecter) CreatePost(post interface{}) *MockPostRepositoryInterface_CreatePost_Call {
	return &MockPostRepositoryInterface_CreatePost_Call{Call: _e.mock.On("CreatePost", post)}
}

func (_c *MockPostRepositoryInterface_CreatePost_Call) Run(run func(post *domain.Post)) *MockPostRepositoryInterface_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_CreatePost_Call) Return(err error) *MockPostRepositoryInterface_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepositoryInterface_CreatePost_Call) RunAndReturn(run func(post *domain.Post) error) *MockPostRepositoryInterface_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) DeletePost(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepositoryInterface_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPostRepositoryInterface_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - id int
func (_e *MockPostRepositoryInterface_Expecter) DeletePost(id interface{}) *MockPostRepositoryInterface_DeletePost_Call {
	return &MockPostRepositoryInterface_DeletePost_Call{Call: _e.mock.On("DeletePost", id)}
}

func (_c *MockPostRepositoryInterface_DeletePost_Call) Run(run func(id int)) *MockPostRepositoryInterface_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_DeletePost_Call) Return(err error) *MockPostRepositoryInterface_DeletePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepositoryInterface_DeletePost_Call) RunAndReturn(run func(id int) error) *MockPostRepositoryInterface_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAllPosts provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) ReadAllPosts() ([]domain.Post, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadAllPosts")
	}

	var r0 []domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]domain.Post, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []domain.Post); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_ReadAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAllPosts'
type MockPostRepositoryInterface_ReadAllPosts_Call struct {
	*mock.Call
}

// ReadAllPosts is a helper method to define mock.On call
func (_e *MockPostRepositoryInterface_Expecter) ReadAllPosts() *MockPostRepositoryInterface_ReadAllPosts_Call {
	return &MockPostRepositoryInterface_ReadAllPosts_Call{Call: _e.mock.On("ReadAllPosts")}
}

func (_c *MockPostRepositoryInterface_ReadAllPosts_Call) Run(run func()) *MockPostRepositoryInterface_ReadAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPostRepositoryInterface_ReadAllPosts_Call) Return(posts []domain.Post, err error) *MockPostRepositoryInterface_ReadAllPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostRepositoryInterface_ReadAllPosts_Call) RunAndReturn(run func() ([]domain.Post, error)) *MockPostRepositoryInterface_ReadAllPosts_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) ReadPost(id int) (*domain.Post, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadPost")
	}

	var r0 *domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (*domain.Post, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) *domain.Post); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepositoryInterface_ReadPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPost'
type MockPostRepositoryInterface_ReadPost_Call struct {
	*mock.Call
}

// ReadPost is a helper method to define mock.On call
//   - id int
func (_e *MockPostRepositoryInterface_Expecter) ReadPost(id interface{}) *MockPostRepositoryInterface_ReadPost_Call {
	return &MockPostRepositoryInterface_ReadPost_Call{Call: _e.mock.On("ReadPost", id)}
}

func (_c *MockPostRepositoryInterface_ReadPost_Call) Run(run func(id int)) *MockPostRepositoryInterface_ReadPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_ReadPost_Call) Return(post *domain.Post, err error) *MockPostRepositoryInterface_ReadPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostRepositoryInterface_ReadPost_Call) RunAndReturn(run func(id int) (*domain.Post, error)) *MockPostRepositoryInterface_ReadPost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function for the type MockPostRepositoryInterface
func (_mock *MockPostRepositoryInterface) UpdatePost(id int, title string, content string) error {
	ret := _mock.Called(id, title, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = returnFunc(id, title, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepositoryInterface_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockPostRepositoryInterface_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - id int
//   - title string
//   - content string
func (_e *MockPostRepositoryInterface_Expecter) UpdatePost(id interface{}, title interface{}, content interface{}) *MockPostRepositoryInterface_UpdatePost_Call {
	return &MockPostRepositoryInterface_UpdatePost_Call{Call: _e.mock.On("UpdatePost", id, title, content)}
}

func (_c *MockPostRepositoryInterface_UpdatePost_Call) Run(run func(id int, title string, content string)) *MockPostRepositoryInterface_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostRepositoryInterface_UpdatePost_Call) Return(err error) *MockPostRepositoryInterface_UpdatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepositoryInterface_UpdatePost_Call) RunAndReturn(run func(id int, title string, content string) error) *MockPostRepositoryInterface_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryInterface creates a new instance of MockUserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type MockUserRepositoryInterface struct {
	mock.Mock
}

type MockUserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterface_Expecter {
	return &MockUserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepositoryInterface
func (_mock *MockUserRepositoryInterface) CreateUser(usr *domain.User) error {
	ret := _mock.Called(usr)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(usr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepositoryInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepositoryInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - usr *domain.User
func (_e *MockUserRepositoryInterface_Expecter) CreateUser(usr interface{}) *MockUserRepositoryInterface_CreateUser_Call {
	return &MockUserRepositoryInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", usr)}
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) Run(run func(usr *domain.User)) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) Return(err error) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) RunAndReturn(run func(usr *domain.User) error) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserRepositoryInterface
func (_mock *MockUserRepositoryInterface) DeleteUser(email string) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepositoryInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepositoryInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepositoryInterface_Expecter) DeleteUser(email interface{}) *MockUserRepositoryInterface_DeleteUser_Call {
	return &MockUserRepositoryInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", email)}
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) Run(run func(email string)) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) Return(err error) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) RunAndReturn(run func(email string) error) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUser provides a mock function for the type MockUserRepositoryInterface
func (_mock *MockUserRepositoryInterface) ReadUser(email string) (*domain.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ReadUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepositoryInterface_ReadUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUser'
type MockUserRepositoryInterface_ReadUser_Call struct {
	*mock.Call
}

// ReadUser is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepositoryInterface_Expecter) ReadUser(email interface{}) *MockUserRepositoryInterface_ReadUser_Call {
	return &MockUserRepositoryInterface_ReadUser_Call{Call: _e.mock.On("ReadUser", email)}
}

func (_c *MockUserRepositoryInterface_ReadUser_Call) Run(run func(email string)) *MockUserRepositoryInterface_ReadUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepositoryInterface_ReadUser_Call) Return(user *domain.User, err error) *MockUserRepositoryInterface_ReadUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepositoryInterface_ReadUser_Call) RunAndReturn(run func(email string) (*domain.User, error)) *MockUserRepositoryInterface_ReadUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsername provides a mock function for the type MockUserRepositoryInterface
func (_mock *MockUserRepositoryInterface) UpdateUsername(email string, new_username string) error {
	ret := _mock.Called(email, new_username)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(email, new_username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepositoryInterface_UpdateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsername'
type MockUserRepositoryInterface_UpdateUsername_Call struct {
	*mock.Call
}

// UpdateUsername is a helper method to define mock.On call
//   - email string
//   - new_username string
func (_e *MockUserRepositoryInterface_Expecter) UpdateUsername(email interface{}, new_username interface{}) *MockUserRepositoryInterface_UpdateUsername_Call {
	return &MockUserRepositoryInterface_UpdateUsername_Call{Call: _e.mock.On("UpdateUsername", email, new_username)}
}

func (_c *MockUserRepositoryInterface_UpdateUsername_Call) Run(run func(email string, new_username string)) *MockUserRepositoryInterface_UpdateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUsername_Call) Return(err error) *MockUserRepositoryInterface_UpdateUsername_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUsername_Call) RunAndReturn(run func(email string, new_username string) error) *MockUserRepositoryInterface_UpdateUsername_Call {
	_c.Call.Return(run)
	return _c
}
